name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        pip install -r requirements.txt
    
    - name: Test package compatibility
      run: |
        # Create a simple test that verifies all packages can be imported
        echo "import spotipy" > test_imports.py
        echo "import pandas" >> test_imports.py
        echo "import docx" >> test_imports.py
        echo "import PyPDF2" >> test_imports.py
        echo "import numpy" >> test_imports.py
        echo "print('All imports successful!')" >> test_imports.py
        python test_imports.py

  build:
    needs: test
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build executable
      run: python build.py
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Spotify Playlist Creator ${{ github.ref_name }}
          
          ### Compatibility
          Tested with Python versions:
          - 3.8, 3.9, 3.10, 3.11, 3.12
          
          ### Required Package Versions
          ```
          $(cat requirements.txt)
          ```
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/SpotifyPlaylistCreator.exe
        asset_name: SpotifyPlaylistCreator.exe
        asset_content_type: application/octet-stream